@page "/eobs/{page:int?}"
@attribute [Authorize(Roles = User_Roles.Admin)]

@inject IEob_Service _eob_Service
@inject ICompany_Service _company_Service
@inject IGroup_Service _group_Service
@inject ISubscription_Service _subscription_Service
@inject IZeroTier_Service _zeroTier_Service
@inject Eob_Mapper _Eob_Mapper

@inject NavigationManager _navigation_Manager

<div class="m-3 text-center">
    <h3>EOBs</h3>
</div>

@if (_form_Status == Form_Status.Disabled)
{
    <div class="alert alert-danger" role="alert">There are no companies, groups or networks yet. Please add them on their respective pages.</div>
}
else
{
    <div class="m-3 text-center">
        <button type="button" class="btn btn-primary" @onclick="(() => Form_New())">Add new EOB</button>
    </div>
}

@if (_load_Status != Load_Status.Loading
   && _form_Status != Form_Status.None
   && _form_Status != Form_Status.Disabled)
{
    if (_form_Status == Form_Status.Edit)
    {
        <h4>@_form_Status - @_eob_View.Node_Name</h4>
    }
    else
    {
        <h4>@_form_Status</h4>
    }


    <EditForm Model="@_eob_View" OnValidSubmit="Save" class="card card-body mt-4 inputForm">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <label for="Serial_Number" class="col-md-2 col-form-label">Serial Number</label>
            <div class="col-md-10">
                <InputText type="text" id="Serial_Number" class="inputBoxStripe noMarginBottom" @bind-Value="_eob_View.Serial_Number" />
                <ValidationMessage For="@(() => _eob_View.Serial_Number)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Node_Name" class="col-md-2 col-form-label">Name</label>
            <div class="col-md-10">
                <InputText type="text" id="Node_Name" class="inputBoxStripe noMarginBottom" @bind-Value="_eob_View.Node_Name" />
                <ValidationMessage For="@(() => _eob_View.Node_Name)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Node_Id" class="col-md-2 col-form-label">Node ID</label>
            <div class="col-md-10">
                <InputText type="text" id="Node_Id" class="inputBoxStripe noMarginBottom" @bind-Value="_eob_View.Node_Id" />
                <ValidationMessage For="@(() => _eob_View.Node_Id)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Company_Id" class="col-md-2 col-form-label">Company</label>
            <div class="col-md-10">
                <InputSelect id="Company_Id" class="inputBoxStripe noMarginBottom"
                    Value="@_eob_View.Company_Id"
                    ValueExpression="@(() => _eob_View.Company_Id)"
                    ValueChanged="@((int value) => Get_Group_By_Company(value))">
                    <option value="0">Select a company...</option>
                    @foreach (var company in _companies)
                    { 
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _eob_View.Company_Id)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Group_Id" class="col-md-2 col-form-label">(Optional) Group</label>
            <div class="col-md-10">
                <InputSelect id="Group_Id" class="inputBoxStripe noMarginBottom" @bind-Value="_eob_View.Group_Id">
                    <option value="0">None</option>
                    @foreach (var group in _groups)
                    {
                        if (group.Company_Id == _eob_View.Company_Id)
                        {
                            <option value="@group.Id">@group.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _eob_View.Group_Id)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Subscription_Expiration" class="col-md-2 col-form-label">Expiration date*</label>
            <div class="col-md-10">
                <InputDate id="Subscription_Expiration" DisplayName="asdf" class="inputBoxStripe noMarginBottom" @bind-Value="_eob_View.Subscription_Expiration">
                </InputDate>
                <ValidationMessage For="@(() => _eob_View.Subscription_Expiration)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Subscription_Active" class="col-md-2 col-form-label">Active subscription</label>
            <div class="col-md-10">
                <InputCheckbox type="checkbox" id="Subscription_Active" class="checkBox noMarginBottom" @bind-Value="_eob_View.Subscription_Active" />
                <ValidationMessage For="@(() => _eob_View.Subscription_Active)" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-10">
                <button type="button" class="btn btn-danger" @onclick="(() => Form_Cancel())">Cancel</button>
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </div>
    </EditForm>
    <p><i>* Leave the date empty if you don't want it to expire</i></p>
}

@if (_load_Status == Load_Status.Success)
{
    @if (!_eobs.Paginate(_pagination).Any())
    {
        _navigation_Manager.NavigateTo("eobs/1");
    }

    <form class="m-2" @onsubmit="Search">
        <input type="text" placeholder="Search..." id="Search" class="inputBoxStripe noMarginBottom" @bind="_search" />
        <button type="submit" class="btn btn-success">Search</button>
    </form>

    <div class="table-responsive">
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th>Serial</th>
                    <th>Name</th>
                    <th>Subscription</th>
                    <th>Start</th>
                    <th>Expiration</th>
                    <th>Network</th>
                    <th>Company</th>
                    <th>Group</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var eob in _eobs.Paginate(_pagination))
                {
                    <tr>
                        <td>@eob.Serial_Number</td>
                        <td>@eob.Node_Name</td>

                        @if (eob.Subscription.Active)
                        {
                            <td class="greenText">Active</td>
                        }
                        else
                        { 
                            <td class="redText">Expired</td>
                        }

                        <td>@eob.Subscription.Start_Date.ToShortDateString()</td>

                        @if (!eob.Subscription.Expiration_Date.HasValue)
                        {
                            <td class="text-info">Never</td>
                        }
                        else if ((eob.Subscription.Expiration_Date.Value - DateTime.Today).Days <= 0)
                        {
                            <td class="redText">@eob.Subscription.Expiration_Date.Value.ToShortDateString()</td>
                        }
                        else if ((eob.Subscription.Expiration_Date.Value - DateTime.Today).Days < 30)
                        {
                            <td class="text-warning">@eob.Subscription.Expiration_Date.Value.ToShortDateString()</td>
                        }
                        else
                        {
                            <td class="greenText">@eob.Subscription.Expiration_Date.Value.ToShortDateString()</td>
                        }

                        <td><button class="btn btn-primary" @onclick="@(()=>_navigation_Manager.NavigateTo($"/network/{eob.Network_Id}"))">View network</button></td>
                        <td><a href="/companies/selected/@eob.Company.Id">@eob.Company.Name</a></td>

                        @if (eob.Group_Id.HasValue)
                        {
                            <td><a href="/groups/selected/@eob.Group.Id">@eob.Group.Name</a></td>
                        }
                        else
                        { 
                            <td>None</td>
                        }

                        <td>
                            <div class="btn-group">
                                <button class="btn btn-primary" @onclick="(() => Form_Edit(eob))">Edit</button>
                                <button class="btn btn-danger" @onclick="(() => Popup_Open(Popup_Status.Delete, eob))">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <Pagination_Select
        Page_Name="eobs"
        Page_Number="@_pagination.Page_Number"
        Total_Items="@_eobs.Count"
        Page_Size="@_pagination.Page_Size">
    </Pagination_Select>
}
else
{
    <p><em>@_load_Status</em></p>
}

@switch (_popup_Status)
{
    case Popup_Status.Delete:
        <Popup
           Status="_popup_Status"
           Text="Are you sure you want to delete this item?"
           Ok_Text="Delete"
           On_Ok="(() => Delete(_Eob_Selection))"
           On_Cancel="(() => Popup_Close())">
        </Popup>
        break;

    case Popup_Status.Foreign_Key_Error:
        <Popup
           Status="Popup_Status.Error"
           Text="Deletion error"
           On_Cancel="(() => Popup_Close())">
        </Popup>
        break;

    case Popup_Status.Exists:
        <Popup
           Status="Popup_Status.Error"
           Text="The given Node ID already exists"
           On_Ok="(() => Popup_Close())">
        </Popup>
        break;

    case Popup_Status.Non_Existent:
        <Popup
           Status="Popup_Status.Error"
           Text="The given Node ID doesn't exist in ZeroTier database"
           On_Ok="(() => Popup_Close())">
        </Popup>
        break;

    case Popup_Status.Bad_Subscription:
        <Popup
           Status="Popup_Status.Error"
           Text="You can't select a subscription when subscription in inactive"
           On_Ok="(() => Popup_Close())">
        </Popup>
        break;
}

@code {
    private List<Eob> _eobs = new List<Eob>();
    private List<Company> _companies = new List<Company>();
    private List<Group> _groups = new List<Group>();

    private Eob_View _eob_View = new Eob_View();
    private Eob _Eob_Selection = new Eob();
    private Pagination _pagination = new Pagination();

    private Load_Status _load_Status;
    private Form_Status _form_Status;
    private Popup_Status _popup_Status;
    private string _search = string.Empty;


    [Parameter]
    public int Page
    {
        get => _pagination.Page_Number;
        set
        {
            if (_pagination.Page_Number != value)
            {
                _pagination.Page_Number = value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Page == 0)
            Page = 1;

        await Refresh();
    }

    protected async Task Refresh()
    {
        _eobs = await _eob_Service.Get_All();
        _companies = await _company_Service.Get_All();
        _groups = await _group_Service.Get_All();

        if (_eobs.Any())
            _load_Status = Load_Status.Success;
        else
            _load_Status = Load_Status.Empty;

        if (!_companies.Any())
            _form_Status = Form_Status.Disabled;
        else
            _form_Status = Form_Status.None;

        _eob_View = new();
    }

    private async Task Save()
    {
        var eob = _Eob_Mapper.View_To_Model(_eob_View);

        if (!_eob_View.Subscription_Active && _eob_View.Subscription_Expiration.HasValue)
        {
            Popup_Open(Popup_Status.Bad_Subscription);
            return;
        }

        if (_form_Status == Form_Status.New)
        {
            eob.Network_Id = await ZT_Create_Network(eob);

            if (_eobs.Any(x => x.Node_Id == eob.Node_Id))
            {
                Popup_Open(Popup_Status.Exists);
                return;
            }
        }

        if (_form_Status == Form_Status.Edit)
        {
            var node = await _zeroTier_Service.Get_Node(eob.Network_Id, eob.Node_Id);

            if (node == null)
            {
                Popup_Open(Popup_Status.Non_Existent);
                return;
            }
        }

        if (_form_Status == Form_Status.New)
        { 
            var subscription = new Subscription
            {
                Start_Date = DateTime.Today,
                Expiration_Date = _eob_View.Subscription_Expiration,
                Active = _eob_View.Subscription_Active,
                Company_Id = eob.Company_Id
            };

            eob.Subscription_Id = await _subscription_Service.Create(subscription);
            await _eob_Service.Create(eob);
        }
        if (_form_Status == Form_Status.Edit)
        { 
            var subscription = await _subscription_Service.Get_By_Id(eob.Subscription_Id.Value);
            subscription.Company_Id = eob.Company_Id;
            subscription.Active = _eob_View.Subscription_Active;
            subscription.Expiration_Date = _eob_View.Subscription_Expiration;

            await _subscription_Service.Update(subscription);
            await _eob_Service.Update(eob);
        }

        await Refresh();
    }

    private async Task<string> ZT_Create_Network(Eob eob)
    {
        var network = new ZT_Network
        {
            description = "Auto-generated EOB network",

            config = new ZT_Network_Config
            {
                name = $"Bridge_{eob.Serial_Number}",

                ipAssignmentPools = new IpAssignmentPools[]
                {
                    new IpAssignmentPools
                    {
                        ipRangeStart = "192.168.99.1",
                        ipRangeEnd = "192.168.99.254"
                    }
                },

                routes = new Routes[]
                {
                    new Routes 
                    { 
                        target = "192.168.99.0/24" 
                    }
                }
            }
        };

        var zt_Network = await _zeroTier_Service.Create_Network(network);

        var node = new ZT_Node
        {
            name = eob.Node_Name,
            description = $"IP: 192.168.99.100. Do not add/change the IP. EOB serial: {eob.Serial_Number}.",
            networkId = zt_Network.id,
            nodeId = eob.Node_Id,
            config = new ZT_Node_Config 
            { 
                authorized = true,
                activeBridge = true,
                noAutoAssignIps = true
            }
        };

        await _zeroTier_Service.Update_Node(node);
        return zt_Network.id;
    }

    private async Task Delete(Eob eob)
    {
        // foreign key
        eob.Subscription_Id = null;
        await _eob_Service.Update(eob);
        bool result = await _subscription_Service.Delete(eob.Subscription.Id);
        result = await _eob_Service.Delete(eob.Id);

        if (!result)
        {
            Popup_Open(Popup_Status.Foreign_Key_Error);
            return;
        }

        await _zeroTier_Service.Delete_Network(eob.Network_Id);

        Popup_Close();
        await Refresh();
    }

    private async Task Get_Group_By_Company(int company_Id)
    {
        _eob_View.Company_Id = company_Id;
        _eob_View.Group_Id = 0;

        if (_eob_View.Company_Id == 0)
            return;

        var eob = _eobs.Find(x => x.Id == _eob_View.Id);
        _groups = await _group_Service.Get_All_By_Company_Id(company_Id);
    }

    private void Form_New()
    {
        _form_Status = Form_Status.New;
        _eob_View = new();
    }

    private void Form_Edit(Eob eob)
    {
        _Eob_Mapper.Model_To_View(eob, _eob_View);
        _form_Status = Form_Status.Edit;
    }

    private void Form_Cancel()
    {
        _form_Status = Form_Status.None;
        _eob_View = new();
    }

    private void Popup_Open(Popup_Status state, Eob eob = null)
    {
        _popup_Status = state;
        _Eob_Selection = eob;
    }

    private void Popup_Close()
    {
        _popup_Status = Popup_Status.None;
        _Eob_Selection = new();
    }

    private async Task Search()
    {
        _eobs = await _eob_Service.Search(_search);
    }
}