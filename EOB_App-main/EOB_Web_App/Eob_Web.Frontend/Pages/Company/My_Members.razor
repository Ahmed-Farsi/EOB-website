@page "/mymembers/{page:int?}"
@attribute [Authorize(Roles = User_Roles.Company_Admin, Policy = "Verified")]

@inject ICompany_Service _company_Service
@inject IUser_Service _user_Service
@inject IGroup_Service _group_Service
@inject User_Mapper _user_Mapper

@inject AuthenticationStateProvider authentication_State_Provider
@inject UserManager<ApplicationUser> _user_Manager
@inject RoleManager<IdentityRole> _role_Manager
@inject NavigationManager _navigation_Manager

<div class="m-3 text-center">
    <h3>My members</h3>
</div>

@if (_load_Status != Load_Status.Loading)
{
    foreach (var user in _users)
    {
        if (!user.Verified
            && user.Role_Name == User_Roles.Employee)
        {
            <div class="alert alert-primary" role="alert">
                New user (@user.Email_Address) has sent a join request. Add?
                <button type="button" class="btn btn-primary" @onclick="(() => Verify_User(user))">Add</button>
                <button type="button" class="btn btn-danger" @onclick="(() => Popup_Open(Popup_Status.Delete, user))">Kick</button>
            </div>
        }
    }
}

@if (_load_Status != Load_Status.Loading
  && _form_Status != Form_Status.None)
{
    <h4>Edit role - @_user_View.Email_Address</h4>
    <EditForm Model="@_user_View" OnValidSubmit="Save" class="card card-body mt-5 inputForm">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <label for="Groups" class="col-md-2 col-form-label">Groups</label>
            <div class="col-md-10">
                <Group_Multi_Select 
                    Selected="_selected_Groups"
                    Deselected="_deselected_Groups">
                </Group_Multi_Select>
            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-10">
                <button type="button" class="btn btn-danger" @onclick="(() => Form_Cancel())">Cancel</button>
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </div>
    </EditForm>
}

@if (_load_Status == Load_Status.Success)
{
    @if (!_users.Paginate(_pagination).Any())
    {
        _navigation_Manager.NavigateTo("mymembers/1");
    }

    <div class="table-responsive">
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Groups</th>
                    <th>Verified</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in _users.Paginate(_pagination))
                {
                    <tr>
                        <td>@user.Email_Address</td>
                        <td>@user.Role_Name</td>

                        @if (user.Groups.Any())
                        {
                            <td><button @onclick="(() => Popup_Open(Popup_Status.Data, user))" class="btn btn-primary">View</button></td>
                        }
                        else
                        {
                            <td>None</td>
                        }

                        <td>@user.Verified</td>
                        <td>
                            <div class="btn-group">
                                <button @onclick="(() => Form_Edit(user))" class="btn btn-primary">Edit</button>
                                <button class="btn btn-danger" disabled="@(user.Role_Name == User_Roles.Company_Admin)" @onclick="(() => Popup_Open(Popup_Status.Delete, user))">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <Pagination_Select Page_Name="mymembers"
                       Page_Number="@_pagination.Page_Number"
                       Total_Items="@_users.Count"
                       Page_Size="@_pagination.Page_Size">
    </Pagination_Select>
}
else
{
    <p><em>@_load_Status</em></p>
}

@switch (_popup_Status)
{
    case Popup_Status.Delete:
        <Popup Status="_popup_Status"
               Text="Are you sure you want do delete this item?"
               Ok_Text="Delete"
               On_Ok="(() => Delete(_user_Selection))"
               On_Cancel="(() => Popup_Close())">
        </Popup>
        break;

    case Popup_Status.Data:
        <Popup Status="_popup_Status" Ok_Text="Ok" On_Ok="(() => Popup_Close())">
            <ul class="list-group">
                @foreach (var group in _user_Selection.Groups)
                {
                    <li class="list-group-item">@group.Name</li>
                }
            </ul>
        </Popup>
        break;
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authentication_State_Task { get; set; }
    private List<ApplicationUser> _application_Users = new List<ApplicationUser>();
    private User _current_User = new User();

    private List<User> _users = new List<User>();
    private List<Group> _groups = new List<Group>();
    private List<Group> _selected_Groups = new List<Group>();
    private List<Group> _deselected_Groups = new List<Group>();

    private User_View _user_View = new User_View();
    private User _user_Selection = new User();
    private Pagination _pagination = new Pagination();

    private Load_Status _load_Status;
    private Form_Status _form_Status;
    private Popup_Status _popup_Status;

    [Parameter]
    public int Page
    {
        get => _pagination.Page_Number;
        set
        {
            if (_pagination.Page_Number != value)
            {
                _pagination.Page_Number = value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Page == 0)
            Page = 1;

        await Get_Current_User();
        await Refresh();
    }

    private async Task Get_Current_User()
    {
        var current_User_Claim = (await _authentication_State_Task).User;
        var application_User = await _user_Manager.GetUserAsync(current_User_Claim);
        _current_User = await _user_Service.Get_By_Id(application_User.UserId);
    }

    protected async Task Refresh()
    {
        _users = await _user_Service.Get_All_By_Company_Id(_current_User.Company_Id.Value);
        _application_Users = _user_Manager.Users.ToList();

        if (_users.Any())
            _load_Status = Load_Status.Success;
        else
            _load_Status = Load_Status.Empty;

        _user_View = new();
        _form_Status = Form_Status.None;
    }

    private async Task Save()
    {
        var user = _user_Mapper.View_To_Model(_user_View);
        await _user_Service.Update(user);
        await _user_Service.Delete_All_User_Group(user);

        foreach (var group in _selected_Groups)
        {
            var user_Group = new User_Group_Mapping
            {
                User_Id = user.Id,
                Group_Id = group.Id
            };

            await _user_Service.Create_User_Group(user_Group);
        }

        await Refresh();
    }

    private async Task Verify_User(User user)
    {
        var application_User = _application_Users.Find(x => x.UserId == user.Id);
        await _user_Manager.AddClaimAsync(application_User, new Claim("verified", "true"));

        user.Verified = true;
        await _user_Service.Update(user);

        await Refresh();
    }

    private async Task Delete(User user)
    {
        var application_User = _application_Users.Find(x => x.UserId == user.Id);
        await _user_Manager.RemoveFromRoleAsync(application_User, User_Roles.Employee);
        await _user_Manager.AddToRoleAsync(application_User, User_Roles.New_User);
        await _user_Manager.RemoveClaimAsync(application_User, new Claim("verified", "true"));

        user.Company_Id = null;
        user.Verified = false;
        user.Role_Name = User_Roles.New_User;
        await _user_Service.Update(user);

        Popup_Close();
        await Refresh();
    }

    private async Task Form_Edit(User user)
    {
        _selected_Groups = new();
        _deselected_Groups = new();

        if (user.Company_Id.HasValue)
        {
            _deselected_Groups = await _group_Service.Get_All_By_Company_Id(user.Company_Id.Value);
            _selected_Groups = user.Groups
                .Where(x => x.Company_Id == user.Company_Id)
                .ToList();

            foreach (var group in _selected_Groups)
            {
                _deselected_Groups.RemoveAll(x => x.Id == group.Id);
            }
        }

        _user_Mapper.Model_To_View(user, _user_View);
        _form_Status = Form_Status.Edit;
    }

    private void Form_Cancel()
    {
        _user_View = new();
        _form_Status = Form_Status.None;
    }

    private void Popup_Open(Popup_Status state, User user = null)
    {
        _popup_Status = state;
        _user_Selection = user;
    }

    private void Popup_Close()
    {
        _popup_Status = Popup_Status.None;
        _user_Selection = new();
    }

    private async Task Get_User_Group(int company_Id)
    {
        _user_View.Company_Id = company_Id;
        _selected_Groups = new();
        _deselected_Groups = new();

        if (_user_View.Company_Id == 0)
            return;

        var user = _users.Find(x => x.Id == _user_View.Id);
        _deselected_Groups = await _group_Service.Get_All_By_Company_Id(company_Id);
        _selected_Groups = user.Groups
            .Where(x => x.Company_Id == company_Id)
            .ToList();

        foreach (var group in _selected_Groups)
        {
            _deselected_Groups.RemoveAll(x => x.Id == group.Id);
        }
    }
}